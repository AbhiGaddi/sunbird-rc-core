spring:
  profiles.active: dev
---
##################################################################
#                      DEVELOPMENT PROFILE                       #
##################################################################
spring:
  profiles: dev
  output:
    ansi:
      enabled: ALWAYS
name: dev-yaml
enviroment: development

perf:
  monitoring:
    enabled: ${PERF_MONITORING_ENABLED:true}

registry:
  context:
    base: ${REGISTRY_CONTEXT_BASE:http://localhost:8080/}
  system:
    base: ${REGISTRY_SYSTEM_BASE:http://localhost:8080/opensaber/}

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: ${CONFIG_SCHEMA_FILE:schema-configuration.jsonld}

database:
  provider: ${DATABASE_PROVIDER:NEO4J}
  embedded: ${DATABASE_EMBEDDED:true}
  # Set an environment variable NEO4J_HOST if running Neo4J as a standalone host
  # This variable is set from the docker-compose.yml with the Neo4J service name
  host: ${DATABASE_HOST:localhost}
  port: ${DATABASE_PORT:7687}
  neo4j-directory: ${DATABASE_DIRECTORY:/data/databases/graph.db}
  neo4j-profiler-enabled: ${DATABASE_PROFILER_ENABLED:false}

# RDF Validation Config
validations:
  create:
    file: ${VALIDATIONS_CREATE_FILE:validations_create.shex}
  update:
    file: ${VALIDATIONS_UPDATE_FILE:validations_update.shex}
    
# File for framing the entity while reading
frame:
  file: ${FRAME_FILE:frame.json}

# Http Connection Timeout Config
connection:
  timeout: ${CONNECTION_TIMEOUT:5000}
  request:
    timeout: ${CONNECTION_REQUEST_TIMEOUT:5000}
read:
  timeout: ${READ_TIMEOUT:5000}

encryption:
  enabled: ${ENCRYPTION_ENABLED:true}
  base: ${ENCRYPTION_BASE:https://dev.open-sunbird.org/encryption/}
  uri: ${ENCRYPTION_URI:https://dev.open-sunbird.org/encryption/encrypt}
  batch:
    uri: ${ENCRYPTION_BATCH_URI:https://dev.open-sunbird.org/encryption/encrypt/obj}

decryption:
  uri: ${DECRYPTION_BASE:https://dev.open-sunbird.org/encryption/decrypt}
  batch:
    uri: ${DECRYPTION_BATCH_URI:https://dev.open-sunbird.org/encryption/decrypt/obj}

audit:
  enabled: ${AUDIT_ENABLED:false}
  frame:
    file: ${AUDIT_FRAME_FILE:audit_frame.json}

authentication:
  enabled: ${AUTHENTICATION_ENABLED:true}

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}
    username: ${sunbird_sso_username}
    password: ${sunbird_sso_password}
    clientId: ${sunbird_sso_client_id}

---
##################################################################
#                      TEST PROFILE                              #
##################################################################
spring:
  profiles: test
  output:
    ansi:
      enabled: ALWAYS
name: test-yaml
enviroment: test

perf:
  monitoring:
    enabled: false

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: schema-configuration-school-test.jsonld

database:
  provider: TINKERGRAPH

# RDF Validation Config
validations:
  create:
    file: good1.shex
  update:
    file: good1.shex

# File for framing the entity while reading
frame:
  file: frame.json
  
# Http Connection Timeout Config
connection:
  timeout: 5000
  request:
    timeout: 5000
read:
  timeout: 5000

encryption:
  enabled: true
  base: https://dev.open-sunbird.org/encryption/
  uri: https://dev.open-sunbird.org/encryption/encrypt
  batch:
    uri: https://dev.open-sunbird.org/encryption/encrypt/obj

decryption:
  uri: https://dev.open-sunbird.org/encryption/decrypt
  batch:
    uri: https://dev.open-sunbird.org/encryption/decrypt/obj

audit:
  enabled: false
  frame:
    file: audit_frame.json

authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}
    username: ${sunbird_sso_username}
    password: ${sunbird_sso_password}
    clientId: ${sunbird_sso_client_id}
